apply plugin: 'java'
apply plugin: 'kotlin'

/** 执行java工程（方法一）./gradlew run -PappArgs="['-h']"
 **/
ext {
    defMainClassName = "com.masonliu.decompileapk.Main"
}
apply plugin: 'application'
run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : project.ext.defMainClassName
}
defaultTasks 'run'

/** 执行java工程（方法二）  ./gradlew runApp -PmainClass="com.masonliu.wanfo.xuefo.TestCollector"
 **/
task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "com.masonliu.decompileapk.Main"
}

/** 打jar包  ./gradlew jar -PmainClass="com.masonliu.decompileapk.Main"
 *  其他打包方法 链接：https://www.jianshu.com/p/5bb1e87df15f
 另一种方法：application插件
 apply plugin: 'application'
 mainClassName = appMainClass
 执行命令gradle build或者./gradlew build，查看build/distributions会有两个压缩文件，压缩文件包含了两个文件夹，bin为启动脚本，lib则是软件jar包和依赖。还可以执行./gradlew installDist生成未压缩文件目录build/install。
 **/
jar {
    from {
        //添加依懒到打包文件
        //configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtime.collect { zipTree(it) }
    }
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : project.ext.defMainClassName
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

/** 执行jar包 ./gradlew runJar -PappArgs="['-u', 'myuser', 'some other argument', 'and/a/path']"
 **/
task runJar(type: Exec) {
    def myArgs = ["java", "-jar", "${project.buildDir}/libs/app.jar"]
    if (project.hasProperty("appArgs")) {
        def args = Eval.me(appArgs)
        myArgs.addAll(args)
    }
    commandLine myArgs
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    //compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
